import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as o,o as r}from"./app-B8RSKxcc.js";const l={};function g(c,t){return r(),e("div",null,t[0]||(t[0]=[o('<h2 id="git-命令" tabindex="-1"><a class="header-anchor" href="#git-命令"><span>git 命令</span></a></h2><blockquote><p>git init<br> git clone xxx<br> git status<br> git add .<br> git commit -m &quot;fea: xxx;&quot;<br> git push</p></blockquote><p>使用 Git 下载指定分支命令为：git clone -b 分支名仓库地址 ； -b 表示要从分支下载</p><ol><li>git branch -r</li><li>git status</li><li>git branch optimize</li><li>git checkout optimize // 切换分支 <code>git checkout &lt;分支名称&gt;</code></li><li>git push -u origin optimize</li><li>git add .</li><li>git commit -m &#39;web 端优化&#39;</li><li>git remote add origin [gitee 仓库地址] // 添加 remote 仓库地址:</li><li>git push origin master -u // -u 可不传 // 将项目内容推送到 gitee:</li><li>git branch -d &lt;branch_name&gt; // 删除本地的 Git 分支</li><li>git branch -D &lt;branch_name&gt; // 强制删除本地分支</li><li>git branch -a // 查看所有分支</li></ol><ul><li><p>1.切换分支<br><code>git checkout &lt;分支名称&gt;</code></p></li><li><p>2.创建并切换分支<br><code>git checkout -b &lt;新分支名称&gt;</code></p><ul><li>相当于执行了以下两个命令<br><code>git branch new-feature</code><br><code>git checkout new-feature</code></li></ul></li><li><p>3.重命名本地分支<br><code>git branch -m &lt;新分支名称&gt;</code></p><ul><li>重命名一个不是当前分支的分支<br><code>git branch -m &lt;旧分支名称&gt; &lt;新分支名称&gt;</code></li></ul></li><li><p>4.删除本地分支<br><code>git branch -d &lt;分支名称&gt;</code></p><ul><li>如果分支有未合并的更改，并且你确定要删除它，可以使用 -D 选项强制删除：<br><code>git branch -D &lt;分支名称&gt;</code></li></ul></li><li><p>5.使用--force 或-f 选项</p></li><li><p>6.查看远程分支</p><ul><li>查看远程库中已有分支，从图中找到自己想要切换的分支名。（remotes/origin/dev，remotes 表示是远程库，origin 表示远程库的名字，dev 表示远程库的分支名）<br><code>git branch -a</code></li></ul></li><li><p>7.先查看本地分支<br><code>git branch</code></p></li><li><p>8.删除远程分支<br> git push origin -d &lt;分支名称&gt;<br> git push origin -d abc // 如远程分支的名字为 origin/abc</p></li><li><p>Git 2.23</p><ul><li>git switch 分支名 // 切换分支</li><li>git switch -c 新分支名 // 创建并切换到新分支</li></ul></li></ul><h2 id="git分支回退到某次提交" tabindex="-1"><a class="header-anchor" href="#git分支回退到某次提交"><span>git分支回退到某次提交</span></a></h2><ol><li><em><strong>使用 git reset</strong></em><br> 丢弃之后的提交（硬重置）<br> 如果你想要回退到某个特定的提交，并且丢弃该提交之后的所有更改，可以使用--hard选项。<br><code>git reset --hard &lt;commit-hash&gt;</code><br> 这里的<code>&lt;commit-hash&gt;</code>是你想要回退到的提交的哈希值。你可以通过git log查看提交历史来找到这个哈希值。</li></ol><p>保留之后的提交（软重置）<br> 如果你想要保留之后的提交，但是想要将HEAD指针移动到指定的提交，可以使用--soft选项。<br><code>git reset --soft &lt;commit-hash&gt;</code><br> 这将把你的工作目录中的更改保留在暂存区，但是你当前的分支指针将会被重置到指定的提交。</p><p>保留部分更改（混合重置）<br> 如果你想要保留一部分更改，但又想丢弃其他的更改，可以先使用<code>git reset --mixed &lt;commit-hash&gt;</code>（默认选项，等同于<code>git reset &lt;commit-hash&gt;</code>）。<br><code>git reset &lt;commit-hash&gt;</code><br> 这将把你的工作目录中的更改保留在工作目录中，但是暂存区将会被重置到指定的提交状态。<br> 2. <em><strong>使用git checkout</strong></em><br> 虽然git checkout主要用于切换分支和恢复工作树文件，但它也可以用来“检出”特定的提交，但这通常是临时的，因为它不会影响HEAD指针。如果你想临时查看某个特定提交的状态，可以这么做：<br><code>git checkout &lt;commit-hash&gt;</code><br> 这会将HEAD移动到指定的提交，但是不会改变你当前分支的指针。如果你想回到原来的分支，可以使用：<br><code>git checkout -</code></p><ol start="3"><li><em><strong>使用git revert</strong></em><br> 如果你想要回退某个提交，但是又想保留历史记录（即创建一个新的提交来“撤销”之前的提交），可以使用git revert。<br><code>git revert &lt;commit-hash&gt;</code><br> 这会创建一个新的提交，该提交会撤销指定提交所做的所有更改。这对于需要保留项目历史清晰性的情况非常有用。</li></ol><p><em><strong>总结</strong></em><br> 选择哪种方法取决于你的具体需求：是否需要保留之后的更改、是否需要保持历史记录清晰等。通常，对于丢弃之后的更改并回到一个特定的状态，使用<code>git reset --hard</code>是最直接的。<br> 如果要保留历史记录和更改，使用<code>git revert</code>可能更合适。如果你只是想临时查看某个状态而不改变历史，可以使用<code>git checkout</code>。</p><h3 id="eslint-的初始化" tabindex="-1"><a class="header-anchor" href="#eslint-的初始化"><span>ESLint 的初始化</span></a></h3><p><code>npm init @eslint/config</code></p>',13)]))}const s=i(l,[["render",g],["__file","git_order.html.vue"]]),d=JSON.parse(`{"path":"/plugins/git_order.html","title":"git 命令","lang":"zh-CN","frontmatter":{"title":"git 命令","date":"2025-02-26T00:00:00.000Z","article":false,"description":"git 命令 git init git clone xxx git status git add . git commit -m \\"fea: xxx;\\" git push 使用 Git 下载指定分支命令为：git clone -b 分支名仓库地址 ； -b 表示要从分支下载 git branch -r git status git branch opt...","head":[["meta",{"property":"og:url","content":"https://hr-koala.github.io/htblog/htblog/plugins/git_order.html"}],["meta",{"property":"og:site_name","content":"博客和随笔"}],["meta",{"property":"og:title","content":"git 命令"}],["meta",{"property":"og:description","content":"git 命令 git init git clone xxx git status git add . git commit -m \\"fea: xxx;\\" git push 使用 Git 下载指定分支命令为：git clone -b 分支名仓库地址 ； -b 表示要从分支下载 git branch -r git status git branch opt..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-07T10:03:37.000Z"}],["meta",{"property":"article:published_time","content":"2025-02-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-07T10:03:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"git 命令\\",\\"description\\":\\"git 命令 git init git clone xxx git status git add . git commit -m \\\\\\"fea: xxx;\\\\\\" git push 使用 Git 下载指定分支命令为：git clone -b 分支名仓库地址 ； -b 表示要从分支下载 git branch -r git status git branch opt...\\"}"]]},"headers":[{"level":2,"title":"git 命令","slug":"git-命令","link":"#git-命令","children":[]},{"level":2,"title":"git分支回退到某次提交","slug":"git分支回退到某次提交","link":"#git分支回退到某次提交","children":[{"level":3,"title":"ESLint 的初始化","slug":"eslint-的初始化","link":"#eslint-的初始化","children":[]}]}],"git":{"createdTime":1740572364000,"updatedTime":1741341817000,"contributors":[{"name":"hr-koala","username":"hr-koala","email":"htong890@outlook.com","commits":2,"url":"https://github.com/hr-koala"},{"name":"tonghaoran","username":"tonghaoran","email":"tonghaoran@szkingdom.com","commits":1,"url":"https://github.com/tonghaoran"}]},"readingTime":{"minutes":3.7,"words":1111},"filePathRelative":"plugins/git_order.md","localizedDate":"2025年2月26日","excerpt":"<h2>git 命令</h2>\\n<blockquote>\\n<p>git init<br>\\ngit clone xxx<br>\\ngit status<br>\\ngit add .<br>\\ngit commit -m \\"fea: xxx;\\"<br>\\ngit push</p>\\n</blockquote>\\n<p>使用 Git 下载指定分支命令为：git clone -b 分支名仓库地址 ； -b 表示要从分支下载</p>\\n<ol>\\n<li>git branch -r</li>\\n<li>git status</li>\\n<li>git branch optimize</li>\\n<li>git checkout optimize // 切换分支 <code>git checkout &lt;分支名称&gt;</code></li>\\n<li>git push -u origin optimize</li>\\n<li>git add .</li>\\n<li>git commit -m 'web 端优化'</li>\\n<li>git remote add origin [gitee 仓库地址] // 添加 remote 仓库地址:</li>\\n<li>git push origin master -u // -u 可不传 // 将项目内容推送到 gitee:</li>\\n<li>git branch -d &lt;branch_name&gt; // 删除本地的 Git 分支</li>\\n<li>git branch -D &lt;branch_name&gt; // 强制删除本地分支</li>\\n<li>git branch -a // 查看所有分支</li>\\n</ol>","autoDesc":true}`);export{s as comp,d as data};
