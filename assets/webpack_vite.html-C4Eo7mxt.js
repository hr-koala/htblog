import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a as l,o as t}from"./app-DWKBY5IL.js";const i="/htblog/images/vite/webpack-vite.png",d="/htblog/images/vite/webpack-vite3.png",a="/htblog/images/vite/webpack-vite2.png",p={};function r(n,e){return t(),c("div",null,e[0]||(e[0]=[l('<p>选 Vite 还是 Webpack ？</p><h2 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack"><span>Webpack</span></a></h2><p><code>Webpack</code> 是一个基于打包器的构建工具，同一个入口文件的代码会打包成一个 <code>Bundle</code> 文件。Webpack 长期来的一个痛点是对于大规模应用的<strong>应用启动和热更新</strong>速度很慢。<br><img src="'+i+'" alt="Webpack" loading="lazy"></p><p>当文件发生变动时，<strong>整个 JavaScript Bundle 文件会被 Webpack 重新构建</strong>，这也是为什么使用 Webpack 的大规模应用在应用启动和热更新时速度很慢的原因。</p><h3 id="webpack-打包过程" tabindex="-1"><a class="header-anchor" href="#webpack-打包过程"><span>Webpack 打包过程：</span></a></h3><ul><li>从一个入口文件开始，基于代码文件中的所有 <code>import，export，require</code> 构建依赖树；</li><li>编译 JS/CSS 等模块；</li><li>使用算法排序、重写、连接代码；</li><li>优化。</li></ul><p>开发环境的 Webpack：</p><ul><li>打包所有代码；(webpack 会将不同的模块打包成不同 bundle 或 chunk 文件)</li><li>启动 <code>webpack-dev-server</code> 托管打包好的代码；</li><li>启动 <code>websocket</code> 处理热更新 <code>HMR</code>。(浏览器是通过 websocket 和 webpack-dev-server 进行通信的)</li></ul><p>应用规模越大，启动和热更新代码越慢。及时启动了热更新，每次代码变更也需要重新生产 Bundle 文件。</p><h3 id="hmr-热更新原理" tabindex="-1"><a class="header-anchor" href="#hmr-热更新原理"><span><a href="https://www.cnblogs.com/liangyin/p/16579708.html" target="_blank" rel="noopener noreferrer">HMR 热更新原理</a></span></a></h3><p><code>Hot Module Replacement</code>（以下简称 HMR）是 webpack 发展至今引入的最令人兴奋的特性之一 ，当你对代码进行修改并保存后，webpack 将对代码重新打包，并将新的模块发送到浏览器端，浏览器通过新的模块替换老的模块，这样在不刷新浏览器的前提下就能够对应用进行更新。<br><img src="'+d+'" alt="HMR 工作原理流程图" loading="lazy"></p><ul><li><ol><li>在<code>webpack</code>的 <code>dev</code> 模式下，<code>webpack</code>会<code>watch</code>文件系统的文件修改，一旦监听到文件变化，<code>webpack</code>就会对相关模块进行重新打包，打包完之后会将代码保存在内存中。</li></ol></li><li><ol start="2"><li><code>webpack</code>和<code>webpack-dev-server</code>之间的交互，其中，主要是利用<code>webpack-dev-server</code>里的<code>webpack-dev-middleware</code>这个中间件调用<code>webpack</code>暴露给外部的<code>API</code>对代码变化进行的监控。</li></ol></li><li><ol start="3"><li>第三步是<code>webpack-dev-server</code>对静态文件变化的监控，这一步和第一步不同，并不是要监控代码进行重新打包，而是监听配置文件中静态文件的变化，如果发生变化，则会通知浏览器需要重新加载，即<code>live reload</code>（刷新），和 <code>HMR</code>不一样。具体配置为，在相关配置文件配置 <code>devServer.watchContentBase</code>。</li></ol></li><li><ol start="4"><li>服务器端的<code>webpack-dev-server</code> 利用 <code>sockjs</code>在浏览器和服务器之间建立一个<code>websocket</code>长链接，将 <code>webpack</code> 打包变化信息告诉浏览器端的<code>webpack-dev-server</code>，这其中也包括静态文件的改变信息，当然，这里面最重要的就是每次打包生成的不同 <code>hash</code> 值。</li></ol></li><li><ol start="5"><li>浏览器端的 <code>webpack-dev-server</code> 接收到服务器端的请求，他自身并不会进行代码的替换，他只是一个中间商，当接收到的信息有变化时，他会通知 <code>webpack/hot/dev-server</code>， 这是 <code>webpack</code> 的功能模块，他会根据浏览器端的 <code>webpack-dev-server</code> 传递的信息以及 <code>dev-server</code> 的配置，决定浏览器是执行刷新操作还是热更新操作。</li></ol></li><li><ol start="6"><li>如果是刷新操作，则直接通知浏览器进行刷新。如果是热更新操作，则会通知热加载模块 <code>HotModuleReplacement.runtime</code>，这个 <code>HotModuleReplacement.runtime</code>是浏览器端 <code>HMR</code> 的中枢系统，他负责接收上一步传递过来的 <code>hash</code> 值，然后通知并等待下一个模块即 <code>JsonpMainTemplate.runtime</code> 向服务器发送请求的结果。</li></ol></li><li><ol start="7"><li><code>HotModuleReplacement.runtime</code>通知<code>JsonpMainTemplate.runtime</code>模块要进行新的代码请求，并等待其返回的代码块。</li></ol></li><li><ol start="8"><li><code>JsonpMainTemplate.runtime</code>先向服务端发送请求，请求包含 <code>hash</code> 值的 <code>json</code> 文件。</li></ol></li><li><ol start="9"><li>获取到所有要更新模块的 <code>hash</code> 值之后，再次向服务端发送请求，通过 <code>jsonp</code> 的形式，获取到最新的代码块，并将此代码块发送给 <code>HotModulePlugin</code>。</li></ol></li><li><ol start="10"><li><code>HotModulePlugin</code> 将会对新旧模块进行对比，决定是否需要更新，若需要更新，则会检查其依赖关系，更新模块的同时更新模块间的引用。</li></ol></li></ul><h2 id="vite" tabindex="-1"><a class="header-anchor" href="#vite"><span>Vite</span></a></h2><p>Vite 是旨在<code>提升开发者体验</code>的下一代 JavaScript 构建工具，核心借助了<code>浏览器的原生 ES Modules</code> 和像 <code>esbuild</code> 这样的将代码编译成 <code>native code</code> 的打包工具。</p><p>Vite 主要有两方面组成：</p><ul><li>一个开发服务器，基于 <code>ESM</code> 提供丰富的内建能力，比如速度快到惊人的模块热更新（HMR）；</li><li>一套构建指令，使用 <code>rollup</code> 进行代码打包，且零配置即可输出用于生产环境的高度优化的静态代码。</li></ul><p>Vite 的核心能力和 webpack + webpack-dev-server 相似，但是在开发者体验上有一些提升：</p><ul><li>启动应用都只需更少的时间；</li><li><code>HMR</code>（Hot Module Replacing）热更新都可以做到及时响应；</li><li>按需编译；</li><li>零配置，开箱即用；</li><li>Esbuild 能力带来的 <code>Typescript/jsx</code> 的原生支持。</li></ul><p>大型的 JavaScript 项目在开发和生产环境有比较差的性能表现，往往是因为我们使用的构建工具没有充分做到<strong>并行处理、内存优化和缓存</strong>。</p><h3 id="核心理念-bundless-开发环境构建" tabindex="-1"><a class="header-anchor" href="#核心理念-bundless-开发环境构建"><span><strong><em>核心理念：Bundless 开发环境构建</em></strong></span></a></h3><p>浏览器的原生 <code>ES Modules</code> 能力允许在不将代码打包到一起的情况下运行 JavaScript 应用。Vite  的核心理念很简单，就是借助浏览器原生  <code>ES Modules</code>  能力，当浏览器发出请求时，为浏览器按需提供  ES Module  文件，浏览器获取  ES Module  文件会直接执行。</p><h3 id="应用启动" tabindex="-1"><a class="header-anchor" href="#应用启动"><span><strong>应用启动</strong></span></a></h3><p>Vite 将应用中的模块分为<strong>依赖和源码</strong>两类，分别进行服务器启动时间的优化。</p><ul><li><strong>依赖模块</strong>，开发过程中基本不会变化。Vite 对依赖采用了 <code>esbuild</code> <strong>预构建</strong>的方式，esbuild 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍；</li><li><strong>源码模块</strong>，是用户自己开发的代码，会经常变动。</li></ul><p>Vite 在浏览器请求时按需转换并以原生 <code>ESM</code> 方式提供源码，让浏览器接管了打包程序的部分工作。</p><h3 id="vite-如何工作" tabindex="-1"><a class="header-anchor" href="#vite-如何工作"><span><strong>Vite 如何工作</strong>？</span></a></h3><p>Vite 通过原生 ES Modules 托管源代码，本质上是<strong>让浏览器来接管部分打包器的工作</strong>。Vite 只会在浏览器请求发生时，按需将源码转成 <code>ES Modules</code> 格式返回给浏览器，由浏览器加载并执行 ES Modules 文件。</p><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="热更新" tabindex="-1"><a class="header-anchor" href="#热更新"><span><strong>热更新</strong></span></a></h3><p>在基于 Bundle 构建的构建器中，当一个文件变动时，重新构建整个 Bundle 文件是非常低效的，且随着应用规模的上升，构建速度会直线下降。<br> 传统的构建器虽然提供了热更新的能力，但是也会存在随着应用规模上升，热更新速度显著下降的问题。</p><p>Vite 基于 <code>ESM</code> <strong>按需</strong>提供源码文件，当一个文件被编辑后，Vite 只会重新编译并提供该文件。因此，无论项目规模多大，Vite 的热更新都可以保持快速更新。</p><p>此外，Vite 合理<strong>利用浏览器缓存来加速页面加载</strong>，源码模块请求根据 <code>304 Not Modified</code> 进行协商缓存；依赖模块请求通过 <code>Cache-Control: max-age=31536000,immutable</code> 进行强缓存，因此一旦缓存，不会再次请求。</p><h3 id="生产环境仍需打包" tabindex="-1"><a class="header-anchor" href="#生产环境仍需打包"><span><strong>生产环境仍需打包</strong></span></a></h3><p>在生产环境使用 ESM 会存在大量额外网络请求问题，因此生产环境不太试用 ESM，最好的方式还是代码进行 <code>tree-shaking</code>、<code>懒加载</code>、和 <code>chunk 分隔</code>等。</p><p>那么生产环境的构建为什么不直接使用 esbuild，而是使用 <code>rollup</code> 呢？这是因为 esbuild 在代码分隔、css 处理等方面的功能仍在开发中，rollup 在应用打包方面更加的成熟且灵活。</p><h3 id="性能提升" tabindex="-1"><a class="header-anchor" href="#性能提升"><span><strong>性能提升</strong></span></a></h3><p>Vite 依托支持原生 <code>ESM</code> 模块的现代浏览器，极大的降低了应用的启动和重新构建时间。Vite 本质上是一个在开发环境为浏览器按需提供文件的 Web Server，这些文件包含源码模块和在第一次运行时使用 esbuild 预构建的依赖模块。</p><p>Vite 和 Webpack 的主要不同在于开发环境下对于源码如何被托管以及支持哪种模块规范。</p><h3 id="依赖预构建" tabindex="-1"><a class="header-anchor" href="#依赖预构建"><span><strong>依赖预构建</strong></span></a></h3><p>Vite 在首次启动时，会进行依赖预构建。依赖预构建有两个目的：</p><ul><li>CommonJs 和 UMD 的兼容性：开发阶段，Vite 的 <code>Dev Server</code> 将所有代码视为原生 ES 模块。因此，Vite 必须将 CommonJS 或 UMD 发布的依赖项转为 ESM。</li><li>性能：Vite 将有很多内部模块的依赖视为单个模块，以提升页面加载性能。比如，<code>lodash-es</code> 拥有超过 600 个内部模块，当 <code>import {debounce} from &#39;lodash-es&#39;;</code> 时，浏览器会同时发起超过 600 个请求，并行请求过多将会显著影响页面加载性能。因此预构建将 <code>lodash-es</code> 视为一个模块，浏览器只需要发起一个请求。</li></ul><h3 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span><strong>缓存</strong></span></a></h3><ol><li>文件系统缓存</li></ol><p>Vite 会将预构建的依赖缓存到 <code>node_modules/.vite</code> ，它根据几个源决定是否需要重新运行预构建步骤：</p><ul><li><code>package.json</code> 中的 <code>dependencies</code> 列表；</li><li>包管理的 <code>lockfile</code>，例如 <code>package-lock.json</code>，<code>yarn.lock</code> 或者 <code>pnpm-lock.yaml</code></li><li>可能在 <code>vite.config.js</code> 相关字段中配置过的。</li></ul><p>只有在上述其中一项发生更改时，才需要重新运行预构建。</p><p>如果处于某些原因，你想要强制 Vite 重新构建依赖，你可以用 <code>--force</code> 命令选项启动开发服务器，或者手动删除 <code>node_modules/.vite</code> 目录。</p><ol start="2"><li>浏览器缓存</li></ol><p>解析后的依赖请求会以 HTTP 头 <code>max-age=31536000,immutable</code> 强缓存，以提高开发时的页面重载性能。如果你想通过本地编辑来调试依赖项，可以：</p><ul><li>通过浏览器调试工具的 <code>Network</code> 选项卡暂时禁用缓存；</li><li>重启 <code>Vite Dev Server</code>，并添加 <code>--force</code> 命令以重新构建依赖；</li><li>重新载入页面。</li></ul><h3 id="typescript-原生支持" tabindex="-1"><a class="header-anchor" href="#typescript-原生支持"><span><strong>Typescript 原生支持</strong></span></a></h3><p>Vite 天然支持引入 .ts 文件，单仅支持 .ts 文件的转译工作，并不执行任何类型检查。<br> Vite 使用 <code>esbuild</code> 将 TypeScript 转译到 JavaScript，约是 tsc 速度的 20-30 倍，同时 <code>HMR</code> 更新到浏览器的时间小于 50 ms。</p><h2 id="对比-webpack-和-vite" tabindex="-1"><a class="header-anchor" href="#对比-webpack-和-vite"><span>对比 Webpack 和 Vite</span></a></h2><ul><li><p>Webpack</p><ul><li>支持的模块规范：<code>ES Modules</code>，<code>CommonJS</code> 和 <code>AMD Modules</code>；</li><li>Dev Server：通过 <code>webpack-dev-server </code>托管打包好的模块；</li><li>生产环境构建：<code>webpack</code></li></ul></li><li><p>Vite</p><ul><li>支持的模块规范：<code>ES Modules</code>；</li><li>Dev Server：<code>原生 ES Modules</code>；</li><li>生产环境构建：<code>Rollup</code></li></ul></li></ul><p>总结</p><p>由于<strong>浏览器原生 ES Modules</strong> 的支持，当浏览器发出请求时，Vite 可以在不将源码打包为一个 Bundle 文件的情况下，将源码文件转化为 ES Modules 文件之后返回给浏览器。这样 Vite 的应用启动和热更新 HMR 时的速度都不会随着应用规模的增加而变慢。</p>',56)]))}const b=o(p,[["render",r],["__file","webpack_vite.html.vue"]]),g=JSON.parse('{"path":"/vite/webpack_vite.html","title":"Vite还是Webpack","lang":"zh-CN","frontmatter":{"title":"Vite还是Webpack","description":"选 Vite 还是 Webpack ？ Webpack Webpack 是一个基于打包器的构建工具，同一个入口文件的代码会打包成一个 Bundle 文件。Webpack 长期来的一个痛点是对于大规模应用的应用启动和热更新速度很慢。 Webpack 当文件发生变动时，整个 JavaScript Bundle 文件会被 Webpack 重新构建，这也是为什...","head":[["meta",{"property":"og:url","content":"https://hr-koala.github.io/htblog/htblog/vite/webpack_vite.html"}],["meta",{"property":"og:site_name","content":"博客和随笔"}],["meta",{"property":"og:title","content":"Vite还是Webpack"}],["meta",{"property":"og:description","content":"选 Vite 还是 Webpack ？ Webpack Webpack 是一个基于打包器的构建工具，同一个入口文件的代码会打包成一个 Bundle 文件。Webpack 长期来的一个痛点是对于大规模应用的应用启动和热更新速度很慢。 Webpack 当文件发生变动时，整个 JavaScript Bundle 文件会被 Webpack 重新构建，这也是为什..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hr-koala.github.io/htblog/htblog/images/vite/webpack-vite.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-26T15:58:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-26T15:58:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vite还是Webpack\\",\\"image\\":[\\"https://hr-koala.github.io/htblog/htblog/images/vite/webpack-vite.png\\",\\"https://hr-koala.github.io/htblog/htblog/images/vite/webpack-vite3.png\\",\\"https://hr-koala.github.io/htblog/htblog/images/vite/webpack-vite2.png\\"],\\"dateModified\\":\\"2025-02-26T15:58:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"htong\\",\\"url\\":\\"htong890@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"Webpack","slug":"webpack","link":"#webpack","children":[{"level":3,"title":"Webpack 打包过程：","slug":"webpack-打包过程","link":"#webpack-打包过程","children":[]},{"level":3,"title":"HMR 热更新原理","slug":"hmr-热更新原理","link":"#hmr-热更新原理","children":[]}]},{"level":2,"title":"Vite","slug":"vite","link":"#vite","children":[{"level":3,"title":"核心理念：Bundless 开发环境构建","slug":"核心理念-bundless-开发环境构建","link":"#核心理念-bundless-开发环境构建","children":[]},{"level":3,"title":"应用启动","slug":"应用启动","link":"#应用启动","children":[]},{"level":3,"title":"Vite 如何工作？","slug":"vite-如何工作","link":"#vite-如何工作","children":[]},{"level":3,"title":"热更新","slug":"热更新","link":"#热更新","children":[]},{"level":3,"title":"生产环境仍需打包","slug":"生产环境仍需打包","link":"#生产环境仍需打包","children":[]},{"level":3,"title":"性能提升","slug":"性能提升","link":"#性能提升","children":[]},{"level":3,"title":"依赖预构建","slug":"依赖预构建","link":"#依赖预构建","children":[]},{"level":3,"title":"缓存","slug":"缓存","link":"#缓存","children":[]},{"level":3,"title":"Typescript 原生支持","slug":"typescript-原生支持","link":"#typescript-原生支持","children":[]}]},{"level":2,"title":"对比 Webpack 和 Vite","slug":"对比-webpack-和-vite","link":"#对比-webpack-和-vite","children":[]}],"git":{"createdTime":1740585518000,"updatedTime":1740585518000,"contributors":[{"name":"hr-koala","username":"hr-koala","email":"htong890@outlook.com","commits":1,"url":"https://github.com/hr-koala"}]},"readingTime":{"minutes":9.27,"words":2781},"filePathRelative":"vite/webpack_vite.md","localizedDate":"2025年2月26日","excerpt":"<p>选 Vite 还是 Webpack ？</p>\\n<h2>Webpack</h2>\\n<p><code>Webpack</code> 是一个基于打包器的构建工具，同一个入口文件的代码会打包成一个 <code>Bundle</code> 文件。Webpack 长期来的一个痛点是对于大规模应用的<strong>应用启动和热更新</strong>速度很慢。<br>\\n<img src=\\"/images/vite/webpack-vite.png\\" alt=\\"Webpack\\" loading=\\"lazy\\"></p>\\n<p>当文件发生变动时，<strong>整个 JavaScript Bundle 文件会被 Webpack 重新构建</strong>，这也是为什么使用 Webpack 的大规模应用在应用启动和热更新时速度很慢的原因。</p>","autoDesc":true}');export{b as comp,g as data};
