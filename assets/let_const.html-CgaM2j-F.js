import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a,o as s}from"./app-CstCi3j8.js";const l={};function n(r,e){return s(),i("div",null,e[0]||(e[0]=[a(`<h2 id="说说-var、let、const-之间的区别" tabindex="-1"><a class="header-anchor" href="#说说-var、let、const-之间的区别"><span>说说 var、let、const 之间的区别</span></a></h2><p><code>var</code>、<code>let</code>、<code>const</code> 三者区别可以围绕下面五点展开：</p><ul><li>变量提升</li><li>暂时性死区</li><li>块级作用域</li><li>重复声明</li><li>修改声明的变量</li><li>使用</li></ul><h3 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升"><span>变量提升</span></a></h3><p>在 ES5 中，顶层对象的属性和全局变量是等价的，用 var 声明的变量既是全局变量，也是顶层变量<br> 注意：顶层对象，在浏览器环境指的是 <code>window</code> 对象，在 Node 指的是 <code>global</code> 对象<br> var 声明的变量存在变量提升，即变量可以在声明之前调用，值为 undefined<br> let 和 const 不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错<br> let 命令所在的代码块内有效</p><h3 id="暂时性死区" tabindex="-1"><a class="header-anchor" href="#暂时性死区"><span>暂时性死区</span></a></h3><p>var 不存在暂时性死区<br> let 和 const 存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量<br> 只要块级作用域内存在 let 命令，这个区域就不再受外部影响</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 123</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line highlighted"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  a</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;abc&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ReferenceError</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="块级作用域" tabindex="-1"><a class="header-anchor" href="#块级作用域"><span>块级作用域</span></a></h3><p>var 不存在块级作用域<br> let 和 const 存在块级作用域</p><h3 id="重复声明" tabindex="-1"><a class="header-anchor" href="#重复声明"><span>重复声明</span></a></h3><p>var 允许重复声明变量<br> let 和 const 在同一作用域不允许重复声明变量</p><h3 id="修改声明的变量" tabindex="-1"><a class="header-anchor" href="#修改声明的变量"><span>修改声明的变量</span></a></h3><p>var 和 let 可以<br> const 声明一个只读的常量。一旦声明，常量的值就不能改变<br> const 实际上保证的并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动<br> 对于简单类型的数据，值就保存在变量指向的那个内存地址，因此等同于常量<br> 对于复杂类型的数据，变量指向的内存地址，保存的只是一个指向实际数据的指针，const 只能保证这个指针是固定的，并不能确保改变量的结构不变</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>能用 const 的情况尽量使用 const，其他情况下大多数使用 let，避免使用 var</p>`,16)]))}const c=t(l,[["render",n],["__file","let_const.html.vue"]]),d=JSON.parse('{"path":"/ES6/let_const.html","title":"var/let/const","lang":"zh-CN","frontmatter":{"title":"var/let/const","date":"2025-02-26T00:00:00.000Z","description":"说说 var、let、const 之间的区别 var、let、const 三者区别可以围绕下面五点展开： 变量提升 暂时性死区 块级作用域 重复声明 修改声明的变量 使用 变量提升 在 ES5 中，顶层对象的属性和全局变量是等价的，用 var 声明的变量既是全局变量，也是顶层变量 注意：顶层对象，在浏览器环境指的是 window 对象，在 Node 指...","head":[["meta",{"property":"og:url","content":"https://hr-koala.github.io/htblog/htblog/ES6/let_const.html"}],["meta",{"property":"og:site_name","content":"博客和随笔"}],["meta",{"property":"og:title","content":"var/let/const"}],["meta",{"property":"og:description","content":"说说 var、let、const 之间的区别 var、let、const 三者区别可以围绕下面五点展开： 变量提升 暂时性死区 块级作用域 重复声明 修改声明的变量 使用 变量提升 在 ES5 中，顶层对象的属性和全局变量是等价的，用 var 声明的变量既是全局变量，也是顶层变量 注意：顶层对象，在浏览器环境指的是 window 对象，在 Node 指..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-26T13:47:04.000Z"}],["meta",{"property":"article:published_time","content":"2025-02-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-26T13:47:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"var/let/const\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-26T13:47:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"htong\\",\\"url\\":\\"htong890@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"说说 var、let、const 之间的区别","slug":"说说-var、let、const-之间的区别","link":"#说说-var、let、const-之间的区别","children":[{"level":3,"title":"变量提升","slug":"变量提升","link":"#变量提升","children":[]},{"level":3,"title":"暂时性死区","slug":"暂时性死区","link":"#暂时性死区","children":[]},{"level":3,"title":"块级作用域","slug":"块级作用域","link":"#块级作用域","children":[]},{"level":3,"title":"重复声明","slug":"重复声明","link":"#重复声明","children":[]},{"level":3,"title":"修改声明的变量","slug":"修改声明的变量","link":"#修改声明的变量","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]}],"git":{"createdTime":1740492025000,"updatedTime":1740577624000,"contributors":[{"name":"hr-koala","username":"hr-koala","email":"htong890@outlook.com","commits":3,"url":"https://github.com/hr-koala"}]},"readingTime":{"minutes":1.81,"words":542},"filePathRelative":"ES6/let_const.md","localizedDate":"2025年2月26日","excerpt":"<h2>说说 var、let、const 之间的区别</h2>\\n<p><code>var</code>、<code>let</code>、<code>const</code> 三者区别可以围绕下面五点展开：</p>\\n<ul>\\n<li>变量提升</li>\\n<li>暂时性死区</li>\\n<li>块级作用域</li>\\n<li>重复声明</li>\\n<li>修改声明的变量</li>\\n<li>使用</li>\\n</ul>\\n<h3>变量提升</h3>\\n<p>在 ES5 中，顶层对象的属性和全局变量是等价的，用 var 声明的变量既是全局变量，也是顶层变量<br>\\n注意：顶层对象，在浏览器环境指的是 <code>window</code> 对象，在 Node 指的是 <code>global</code> 对象<br>\\nvar 声明的变量存在变量提升，即变量可以在声明之前调用，值为 undefined<br>\\nlet 和 const 不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错<br>\\nlet 命令所在的代码块内有效</p>","autoDesc":true}');export{c as comp,d as data};
