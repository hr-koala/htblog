import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as n,o as a}from"./app-DWHO-_z7.js";const e={};function t(h,i){return a(),l("div",null,i[0]||(i[0]=[n(`<h2 id="dllplugin-和-dllreferenceplugin" tabindex="-1"><a class="header-anchor" href="#dllplugin-和-dllreferenceplugin"><span>DllPlugin 和 DllReferencePlugin</span></a></h2><ol><li>我们在利用 webpack 做工程化开发的时候，会遇到这么一个问题，如果我们使用 vue 框架进行开发，虽然 vue 的框架代码几乎不变（除了做升级），但我们还是每次在构建的时候都需要再把 vue 框架代码打一次包，这样就很浪费构建时间。我们在想，能不能把类似 vue 这样几乎不怎么变动的代码体检打包好，放在某个地方，然后在构建的时候引入构建好的就行。这样我们就可以只构建我们自己的业务代码，这样可以大大提高构建效率。</li></ol><p>如何可以实现，就是 DllPlugin 和 DllReferencePlugin，一个负责构建，一个负责引入</p><ol><li><p>DllPlugin<br> DllPlugin 能把第三方库代码分开，每次构建的时候，只构建我们自身的代码<br> 他需要一个独立的 webpack 配置文件来进行配置，我们一般会配置一个<code>webpack.dll.config.js</code>，他的作用就是把第三方库依赖打包到一个 bundle 的 dll 文件里面，还会生成一个 manifest.json 文件来供 DllReferencePlugin 进行映射。</p></li><li><p>DllReferencePlugin<br> 此插件在 webpack.config.js 中使用，作用就是把 DllPlugin 打包的 dll 文件引用到需要的预编译的依赖上来。</p><blockquote><p>例:<br> 比如我们通过 DllPlugin 打包出来了一个 vendor.dll.js 和一个 vendor.manifest.json，vendor.dll.js 包含所有的第三方库文件，而 manifest.json 就是库代码的一个索引，当 webpack 在执行 DllReferencePlugin 时，会读取 manifest.json 文件，看看是否有对应的第三方库</p></blockquote></li><li><p>如何配置使用</p></li></ol><p>4.1 DllPlugin 配置<br> 我们新建一个 webpack.dll.config.js 作为配置文件</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;path&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> DllPlugin</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;webpack/lib/DllPlugin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  entry</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //这里是一个数组，需要构建的第三方库代码</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;./node_modules/vue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  output</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    filename</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;[name].dll.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//文件名称</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_dll_dist&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//将输出的文件放到对应的dist目录下</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    libary</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;_dll_[name]&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//存放相关的dll文件的全局变量名称，比如vue就会存放_dll_vue,防止全局变量冲突</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DllPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;_dll_[name]&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//该插件的name属性需要和output.libray保存一致，该字段值，也就是输出的manifest.json文件中name字段的值，比如在vue.manifest文件中有name:&#39;_dll_vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_dll_dist&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;[name].manifest.json&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后开始构建<br><code>npx webpack --config webpack.dll.config.js</code></p><p>4.2 DllReferencePlugin 配置<br> 我们在 webpack.config.js 里面进行配置 DllReferencePlugin。把刚才的 DllPlugin 打包的 dll 文件进行引用配置</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> DllReferencePlugin</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;webpack/lib/DllReferencePlugin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DllRferencePlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      //告诉webpack使用了哪些第三方库代码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      manifest</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./_dll_dist/mainanifest.json&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//把vue映射到急送文件上去</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再构建<br><code>npm run build</code></p>`,10)]))}const r=s(e,[["render",t],["__file","dllPlugin.html.vue"]]),d=JSON.parse('{"path":"/webpack/dllPlugin.html","title":"DllPlugin和DllReferencePlugin","lang":"zh-CN","frontmatter":{"title":"DllPlugin和DllReferencePlugin","description":"DllPlugin 和 DllReferencePlugin 我们在利用 webpack 做工程化开发的时候，会遇到这么一个问题，如果我们使用 vue 框架进行开发，虽然 vue 的框架代码几乎不变（除了做升级），但我们还是每次在构建的时候都需要再把 vue 框架代码打一次包，这样就很浪费构建时间。我们在想，能不能把类似 vue 这样几乎不怎么变动的代...","head":[["meta",{"property":"og:url","content":"https://hr-koala.github.io/htblog/htblog/webpack/dllPlugin.html"}],["meta",{"property":"og:site_name","content":"博客和随笔"}],["meta",{"property":"og:title","content":"DllPlugin和DllReferencePlugin"}],["meta",{"property":"og:description","content":"DllPlugin 和 DllReferencePlugin 我们在利用 webpack 做工程化开发的时候，会遇到这么一个问题，如果我们使用 vue 框架进行开发，虽然 vue 的框架代码几乎不变（除了做升级），但我们还是每次在构建的时候都需要再把 vue 框架代码打一次包，这样就很浪费构建时间。我们在想，能不能把类似 vue 这样几乎不怎么变动的代..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-13T02:08:24.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-13T02:08:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DllPlugin和DllReferencePlugin\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-13T02:08:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"htong\\",\\"url\\":\\"htong890@outlook.com\\"}]}"]]},"headers":[{"level":2,"title":"DllPlugin 和 DllReferencePlugin","slug":"dllplugin-和-dllreferenceplugin","link":"#dllplugin-和-dllreferenceplugin","children":[]}],"git":{"createdTime":1749780504000,"updatedTime":1749780504000,"contributors":[{"name":"tonghaoran","username":"tonghaoran","email":"tonghaoran@szkingdom.com","commits":1,"url":"https://github.com/tonghaoran"}]},"readingTime":{"minutes":2.24,"words":672},"filePathRelative":"webpack/dllPlugin.md","localizedDate":"2025年6月13日","excerpt":"<h2>DllPlugin 和 DllReferencePlugin</h2>\\n<ol>\\n<li>我们在利用 webpack 做工程化开发的时候，会遇到这么一个问题，如果我们使用 vue 框架进行开发，虽然 vue 的框架代码几乎不变（除了做升级），但我们还是每次在构建的时候都需要再把 vue 框架代码打一次包，这样就很浪费构建时间。我们在想，能不能把类似 vue 这样几乎不怎么变动的代码体检打包好，放在某个地方，然后在构建的时候引入构建好的就行。这样我们就可以只构建我们自己的业务代码，这样可以大大提高构建效率。</li>\\n</ol>\\n<p>如何可以实现，就是 DllPlugin 和 DllReferencePlugin，一个负责构建，一个负责引入</p>","autoDesc":true}');export{r as comp,d as data};
