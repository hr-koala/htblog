import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as p,o as l}from"./app-DWHO-_z7.js";const c="/htblog/images/plugins/server1.png",r="/htblog/images/plugins/server2.png",i="/htblog/images/plugins/server3.png",s="/htblog/images/plugins/server4.png",a="/htblog/images/plugins/server5.png",n="/htblog/images/plugins/server6.png",d="/htblog/images/plugins/server7.png",b="/htblog/images/plugins/server8.png",g="/htblog/images/plugins/server9.png",u="/htblog/images/plugins/server10.png",h="/htblog/images/plugins/server11.png",m="/htblog/images/plugins/server12.png",k="/htblog/images/plugins/server13.png",q="/htblog/images/plugins/server14.png",_="/htblog/images/plugins/server15.png",A="/htblog/images/plugins/server16.png",P="/htblog/images/plugins/server17.png",f="/htblog/images/plugins/server18.png",y="/htblog/images/plugins/server19.png",v="/htblog/images/plugins/server20.png",W={};function z(x,o){return l(),t("div",null,o[0]||(o[0]=[p('<h1 id="服务端开发基础" tabindex="-1"><a class="header-anchor" href="#服务端开发基础"><span>服务端开发基础</span></a></h1><ol><li>建立你的第一个网站（目标） <blockquote><p>前端开发 最终还是属于 <strong>Web 开发</strong> 中的一个分支，想要成为一名合格的前端开发人员，就必须要 <strong>充分理解 Web 的概念</strong>。</p></blockquote></li></ol><p>构建一个专业的网站是一项巨大的工作！对于新手我们应该从小事做起，也就是说咱们不可能立马就要求自己能够开发出跟淘宝一样的电商平台，但是对咱们来说建立一个属于自己的 Blog 网站并不难（其实再大的系统也是由一些基础功能叠加出来的），所以咱们就从这个话题开始聊。</p><ol start="2"><li>如何建立一个 Blog 网站</li></ol><blockquote><p>提问：到底什么是网站？</p><ul><li>可以在浏览器上通过一个地址直接访问使用</li><li>用于提供一种（或多种）特定服务的一系列具备相关性的网页组合的整体</li><li>例如：博客、门户、电商、在线教育等</li></ul></blockquote><p>有了明确的目标过后，我们需要规划具体的业务方案，学习特定的技能，完成各项功能，解决各种过程中出现的问题。</p><blockquote><p><strong>开始 --&gt; 明确业务 --&gt; 根据分析需求 --&gt; 设计功能 --&gt; 具体实现功能 --&gt; 部署上线 --&gt; 结束</strong></p></blockquote><p>2.1. 之前学习了什么？</p><p>在之前的学习过程中，我们很专注，没有关心这些东西在整体中是什么角色，起到什么作用。这里我们是时候总结一下我们之前学过了的内容：</p><ul><li>网页开发技术（硬性） <ul><li>HTML —— 网页内容结构（GUI）</li><li>CSS —— 网页外观样式（GUI）</li><li>JavaScript —— 编程语言（可以用于调用浏览器提供的 API）</li><li>Web APIs —— 网页交互（界面功能）</li><li>jQuery —— 便捷手段（糖果而已，不是必要的）</li></ul></li><li>编程能力 / 编程思想 / 解决问题的思路（软性） <ul><li>我要做什么（我要得到什么），我目前有什么（我能拿到什么）</li></ul></li></ul><p>至此，我们已经可以独立完成网页开发了，具体能完成的东西就是一个一个的网页，而且还能给这个页面加上一些动态的交互。但是这距离成为一个网站还有一些路要走。</p><blockquote><p><strong><em>网页开发 ---&gt; 网站开发 ---&gt; 应用开发</em></strong></p></blockquote><p>2.2. 还需要学习什么？</p><p>想要完成完整的 <strong>Web</strong> 网站，还需要学习什么？</p><ul><li>搭建 <strong>WEB</strong> 服务器（提供网站服务的机器）</li><li><strong>HTTP</strong>（浏览器与服务端的通讯协议）</li><li>服务端开发（动态网页技术）</li><li>数据库操作（服务端存储数据方式）</li><li><strong>AJAX</strong>（浏览器与服务端的数据交互方式）</li></ul><ol start="3"><li>搭建 Web 服务器</li></ol><blockquote><ul><li>服务器（提供服务）指的就是一台安装特定的软件的公共计算机，用于专门用于提供特定的服务。 <ul><li>按照服务类型的不同，又划分为：Web 服务器、数据库服务器、文件服务器等等。</li></ul></li><li>客户端（使用服务）指的是在一次服务过程中使用这个服务的设备（网络端点）。 <ul><li>目前咱们最常见的客户端就是浏览器</li></ul></li></ul></blockquote><p>我们手头上的这些网页，如果想要成为一个网站，首先要完成的第一件事就是有一台公共的 <strong>Web 服务器</strong>，把这一系列的页面放到这台 Web 服务器上，让用户可以通过服务器的地址访问到这些网页。</p><figure><img src="'+c+`" alt="链接" tabindex="0" loading="lazy"><figcaption>链接</figcaption></figure><blockquote><p>思考：为什么不把这些网页放在我们自己电脑上呢？</p></blockquote><p>那么，哪里有这样的服务器呢？<br> 我们手头上的电脑都可以是一台服务器，因为服务器是一个相对的概念，只要能提供服务就可以是一个服务器（提供服务的时候就是服务端，使用服务的时候就是客户端）。</p><p>既然服务器就是安装特定的软件的计算机，那么要让自己的成为 Web 服务器就是要安装一个 Web 服务器软件。</p><p>3.1. Web 服务器软件</p><ul><li><p><code>Nginx</code> ········································ 反向代理</p></li><li><p><code>Apache</code> ····································· PHP</p></li><li><p><code>IIS</code> ·············································· <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a></p></li><li><p><code>Tomcat</code> ····································· Java</p><p>3.2. 安装 Web 服务器软件</p></li></ul><p>这里我们选择一个比较常用的 Web 服务器软件：<code>Apache HTTP Server</code>。</p><blockquote><p>如果使用的是安装版，与其他软件相同，安装无外乎就是一路点下一步，只是需要注意安装目录路径中不要有中文。</p></blockquote><pre><code>由于最新的 Apache 已经不提供 Windows 的安装版本了，所以我们这里使用的是解压版。
</code></pre><blockquote><ul><li>下载地址：<a href="https://www.apachelounge.com/download/" target="_blank" rel="noopener noreferrer">https://www.apachelounge.com/download/</a></li><li>使用说明：<a href="https://httpd.apache.org/docs/current/platform/windows.html" target="_blank" rel="noopener noreferrer">https://httpd.apache.org/docs/current/platform/windows.html</a></li></ul></blockquote><p>安装方式如下，先解压到纯英文路径的文件夹，然后执行以下命令：</p><blockquote><p>注意：需要使用管理员身份运行命令行！！！<br> 切换到  Apache  解压路径中的  bin  目录<br>  <code>cd &lt;解压目录&gt;/bin</code><br> 安装  Apache  服务，‐n  参数是指定服务名称<br>  <code>httpd.exe ‐k install ‐n &quot;Apache&quot;</code><br> 如果需要卸载  Apache，可以执行以下命令<br>  <code>httpd.exe ‐k uninstall ‐n &quot;Apache&quot;</code></p></blockquote><p>执行安装命令过后会报一个错，原因是默认的配置文件有问题，需要先调整一下配置文件 <code>conf/httpd.conf</code> ，才能正常启动服务。<br><img src="`+r+'" alt="" loading="lazy"></p><p>找到 Apache 解压目录中的 conf 目录下的 <code>httpd.conf</code> 文件，定位到 37 行，将 <code>c:/Apache24</code> 改为解压目录，我这里解压到路径是 <code>C:/Develop/apache</code> ，所以我这里修改<br><img src="'+i+'" alt="" loading="lazy"><br> 修改完以后，执行以下命令重新测试配置文件是否通过。</p><blockquote><p><code>httpd.exe ‐t</code></p></blockquote><p>这里仍然报错：<br><br><img src="'+s+'" alt="" loading="lazy"><br> 通过错误信息得知，这里是因为另外一个地方配置的目录不存在导致的，所以接着调整 246 行的 DocumentRoot 选项：<br><br><img src="'+a+'" alt="" loading="lazy"></p><p>随即，我们发现这个配置文件中有很多默认配置选项中的路径都是 <code>c:/Apache24</code> ，所以我们批量都修改为我们解压的目录路径。</p><p>然后重新执行 <code>httpd.exe -t</code> 测试配置文件，这时候应该提示 Syntax OK 。</p><blockquote><p>如果有关于 <code>ServerName</code> 的警告提示，不用管它，暂时还不会影响我们接下来的使用和操作。</p></blockquote><p>接着运行以下命令重新启动 <code>Apache</code> 服务：</p><blockquote><p>注意：需要使用管理员身份运行命令行！！！<br><code>httpd.exe ‐k start ‐n &quot;Apache&quot;</code><br> 重新启动 Apache 服务<br><code>httpd.exe ‐k restart ‐n &quot;Apache&quot;</code><br> 停止 Apache 服务<br><code>httpd.exe ‐k stop ‐n &quot;Apache&quot;</code></p></blockquote><p>回到浏览器中，地址栏输入：<code>http://localhost/</code>，回车访问，这时正常应该看到 It works!<br><br><img src="'+n+'" alt="" loading="lazy"></p><p>3.3. 提供 Web 服务</p><p>启动 Apache，让别人可以使用你机器上安装的 Apache 提供的 Web 服务，访问你机器上的网站。这种情况下你的机器就是服务器，别人的机器就是客户端。<br><br> 注意：</p><ul><li>确保配置文件语法检查通过</li><li>确保 <code>80</code> 端口没有被其他程序占用</li><li>确保防火墙允许 <code>80</code> 端口的请求，或者干脆关掉防火墙</li><li>如果出现 <code>Forbidden</code> 情况，确保配置文件 <code>httpd.conf</code> 中 247 行（ <code>DocumentRoot</code> 之后）的 Directory 配置的与 <code>DocumentRoot</code> 路径相同</li><li>我们在开发阶段大多数都是自己访问自己机器上的网站，那这种情况下，我们既是服务端又是客户端。对于新手来说，最常见的问题就是分不清楚哪是客户端应该有的，哪是服务端应该有的。这种时候一定要保持清醒，客户端局限在浏览器窗口，代码以及 <code>Apache</code> 相关的文件和配置都是放在服务端的。</li></ul><ol start="4"><li>网络基础概念（必要）</li></ol><p>4.1. IP 地址</p><blockquote><p>Internet Protocol Address</p></blockquote><p>设备在某一个网络中的地址，目前最常见的格式： <code>[0-255].[0-255].[0-255].[0-255]</code> 即为四个 0-255 的数字组成。<br><br> 作用就是标识一个网络设备（计算机、手机、电视）在某一个具体的网络当中的地址。<br><br><code>127.0.0.1</code> 是本地回环地址</p><p>4.1.1. 单个网络情况</p><p>在单个局域网下，结构非常简单，就是我们所连接的网络设备（网关）给我们分配了一个地址，在这个范围之内我们都可以通过这个地址找到我们的这个设备。</p><blockquote><p>如果设备没有连接任何网络情况下，我们会有一个本地回环地址 127.0.0.1</p></blockquote><p><img src="'+d+'" alt="" loading="lazy"><br><br> 4.1.2. 多个网络情况</p><p>但是当一个设备同时处于多个网络下（比如同时连接了有线网卡和无线网卡），就会变得稍微复杂一点：<br><img src="'+b+'" alt="" loading="lazy"></p><blockquote><p>例如：<br><br> 小明这个同学同时报名了两个课程，在 A 班级小明是班长，所有 A 班级的同学都管他叫班长（叫班长就能找到他）。而在 B 班级小明是课代表，所有 B 班的同学都管他叫课代表（叫课代表就能找到他）。<br><br> 同样的一个人在不同的环境有不同的身份，这些身份只有特定的环境才生效。<br><br> 纸上得来终觉浅，绝知此事要躬行！多尝试，多思考才能更好的理解这个问题。</p></blockquote><p>4.2. 域名</p><p>由于 IP 地址都是没有规律的一些数字组成的，很难被人记住，不利于广泛传播，所以就有人想出来要给 IP 起名字（别名）。</p><blockquote><p>域名是需要花钱注册的</p></blockquote><p>4.3. DNS</p><p>通过宽带运营商提供的服务器解析一个域名背后对应的 IP，这个过程叫做 <strong>DNS 寻址</strong>，帮你完成 DNS 寻址过程的服务器叫做 <strong>DNS 服务器</strong>。</p><p>4.3.1. hosts 文件</p><p>操作系统在发起对 DNS 服务器的查询请求之前，会优先检查本机的 hosts 文件。如果这个文件中包含了对当前需要解析的域名的配置，则不再发起对 DNS 服务器的请求，直接使用 hosts 文件中的配置。</p><p>文件所在路径：</p><ul><li>Windows： <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code></li><li>macOS： <code>/etc/hosts</code></li></ul><blockquote><p>注意：</p><ul><li>本机的 hosts 文件配置只能到影响本机的 DNS 寻址</li><li>只有以管理员权限运行的编辑器才有权利修改 hosts 文件</li></ul></blockquote><p>4.4. 端口</p><p>计算机本身是一个封闭的环境，就像是一个大楼，如果需要有数据通信往来，必须有门，这个门在术语中就叫端口，每一个端口都有一个编号，每台计算机只有 65536 个端口（0-65535）。</p><blockquote><p>一般我们把“占门”的过程叫做监听</p></blockquote><p>可以通过在命令行中运行： <code>netstat -an</code> 命令监视本机端口使用情况：<br><img src="'+g+'" alt="" loading="lazy"></p><blockquote><p>参考链接：</p></blockquote><blockquote><ul><li><code>https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3</code><br></li><li><code>https://baike.baidu.com/item/%E7%AB%AF%E5%8F%A3</code><br></li><li>http 默认的端口 <code>80</code><br></li><li>https 默认的端口是 <code>443</code></li></ul></blockquote><p>4.5. URL</p><p><code>URL</code>（Uniform Resource Locator），统一资源定位符，通俗点来说就是表示网络当中某一个网页的完整访问地址，它具有一定的格式：<br><img src="'+u+'" alt="" loading="lazy"></p><p>例如：<a href="https://zce.me:80/schools/students?id=18&amp;name=zce#photo" target="_blank" rel="noopener noreferrer">https://zce.me:80/schools/students?id=18&amp;name=zce#photo</a></p><ol start="5"><li><p>请求响应流程<br><img src="'+h+'" alt="" loading="lazy"></p><ol><li>用户打开浏览器</li><li>地址栏输入我们需要访问的网站网址（URL）</li><li>浏览器通过 DNS 服务器获取即将访问的网站 IP 地址</li><li>浏览器发起一个对这个 IP 的请求</li><li>服务端接收到这个请求，进行相应的处理</li><li>服务端将处理完的结果返回给客户端浏览器</li><li>浏览器将服务端返回的结果呈现到界面上</li><li>配置 Apache</li></ol></li><li><p>配置 Apache</p></li></ol><blockquote><p>配置文档：<code>http://httpd.apache.org/docs/current/</code> <br><br> 配置文件中行首的 # 指的是注释 <br><br> 注意：以下所记录的行号仅供参考，不同版本的配置文件可能不尽相同。 <br></p></blockquote><p>6.1. 监听端口</p><p>监听端口可以随意修改为任意一个未被其他程序监听的端口，可以通过设置配置文件 <code>httpd.conf</code> 中的 <code>Listen</code> 指令后面的数字修改。<br><img src="'+m+'" alt="" loading="lazy"></p><p>6.2. 网站根目录</p><blockquote><p>网站根目录就是存放我们网站文件的最顶层目录，通常 URL 中域名后面的第一个斜线对应（映射）的就是网站根目录。<br><br> 默认文档指的是我们在访问某一个目录时（没有指定具体的文件），默认访问的文件叫做默认文档 <br><br> 注：动态网站情况会比较特殊，需要单独考虑，不一定是这个规则。 <br></p></blockquote><p>默认 Apache 的网站根目录是安装目录中的 htdocs 文件夹，为了方便对网站文件的管理，一般我们会将其设置在一个自定义目录中（如果你不介意其实不修改也无所谓）。</p><p>如果需要设置网站根目录，可以通过修改配置文件 httpd.conf 中的网站根目录选项切换。<br><img src="'+k+'" alt="" loading="lazy"></p><p>6.3. 默认文档</p><blockquote><p>当客户端访问的是一个目录而不是具体文件时，服务端默认返回这个目录下的某个文档（文件），这个文档就称之为默认文档。</p></blockquote><p>配置文件 <code>httpd.conf</code> 的 280 行的 <code>DirectoryIndex</code> ，默认文档可以配置多个（有前到后依次去找，找到为止，如果没找到任何一个则启用目录浏览）：<br><img src="'+q+'" alt="" loading="lazy"></p><p>6.4. 虚拟主机</p><p>如果一台机器上只有一个网站的话，没有任何问题，但是如果想要在一台机器上部署多个站点，就必须通过配置虚拟主机的方式解决。</p><blockquote><p>由于后期对虚拟主机的配置操作非常常见，所以我们一般将虚拟主机的配置单独放到一个配置文件中，然后在主配置文件中引入，避免破坏主配置文件中的其他配置。<br><code>Include conf/extra/httpd-vhosts.conf</code> 配置的作用就将另外一个配置文件引入（使其生效）</p></blockquote><p>具体的操作方式就是在主配置文件 <code>httpd.conf</code> 的 505 行取消注释：<br><img src="'+_+'" alt="" loading="lazy"></p><p>然后找到 <code>Apache</code> 的虚拟主机配置文件，添加一个如下的虚拟主机配置节点，然后重新启动 <code>Apache</code>。</p><blockquote><p>这个文件中有两个默认的示例配置，可以注释掉 <br> &gt; <img src="'+A+'" alt="" loading="lazy"></p></blockquote><p>如果真的要使用 <code>baixiu.com</code> 这个域名的话，就只能通过修改 <code>hosts</code> 文件达到目的，原因很简单：这个域名不是我们自己的，我们没有办法修改这个域名在公网上的 DNS。</p><blockquote><p>注意： <br><br> 如果使用了虚拟主机，则默认必须全部使用虚拟主机，即之前的默认网站也必须通过虚拟主机方式配置，否则访问不到。参考：<code>http://skypegnu1.blog.51cto.com/8991766/1532454</code> <br><br> 如果虚拟主机的端口使用的不是 80 ，则需要在主配置文件中添加一个对这个端口的监听： <br> &gt; <img src="'+P+'" alt="" loading="lazy"></p></blockquote><ol start="7"><li>静态网站与动态网站</li></ol><p>至此，我们已经可以把这些静态页面放到服务器上了，客户端也可以通过域名请求这个网站，但是对于我们来说，Apache 能够完成的事情过于简单，无外乎就是找到你请求对应的文件 → 读取文件 → 将文件内容响应给客户端浏览器（文件原封不动的给你）。无法满足让网页内容动起来（随着数据动态变化）的需求。</p><p>于是乎，就有人提出了服务端动态网页的概念，这种实现这种概念的技术有很多种：<code>JSP、ASP.NET、PHP、Node</code> 等等。</p><p>这些技术的原理就是：不再将 HTML 固定写死，每次用户请求时，动态执行一段代码，临时生成一个用户想要的 HTML 页面。<br><img src="'+f+'" alt="" loading="lazy"></p><p>动态网站指的也就是每次请求时服务端动态生成 HTML 返回给用户的这种网站。</p><p>这里我们选择 PHP 作为我们了解服务端动态网页开发的技术方案，注意：我们学习的重心不在 PHP，而是了解服务端开发，以及某些其他对前端开发有帮助的东西。</p><p>7.1. 配置 PHP 支持</p><blockquote><p>PHP 文件的扩展名就是 .php</p></blockquote><p>我们可以尝试在刚刚配置的网站中添加一个扩展名为 php 的文件，然后到浏览器中访问它。</p><blockquote><p><code>&lt;!‐‐ demo.php ‐‐&gt;</code> &gt; <code>&lt;?php echo &#39;Hello PHP&#39;; ?&gt;</code> <br></p></blockquote><p>结果出乎意料，并没有显示我们想要的 Hello PHP ，而是将我们的代码原封不动的返回给浏览器了。</p><blockquote><p><img src="'+y+'" alt="" loading="lazy"><br> 原因很简单：Apache 只能处理静态文件请求，对于后缀名为 .php 这种动态文件，它无法执行，所以就当成是一个静态文件直接返回了。</p></blockquote><p>解决方法：</p><ul><li><p>在服务器上安装 PHP</p><ul><li>解压 php 到纯英文路径目录中</li></ul></li><li><p>在 Apache 中添加支持 PHP 的配置</p><ul><li><p>在 Apache 添加 PHP 处理模块</p><blockquote><p>php support <br><br> LoadModule php7_module C:/Develop/php/php7apache2_4.dll <br></p></blockquote></li><li><p>在 <code>&lt;IfModule mime_module&gt;</code> 节点中添加 .php 扩展名解析支持</p><blockquote><p>parse .php files <br><br> AddType application/x‐httpd‐php .php <br></p></blockquote></li><li><p>默认文档配置节点 <code>&lt;IfModule dir_module&gt;</code> 中添加 index.php</p><blockquote><p>默认文档指的是在访问一个目录而不是具体文件名时，默认执行的文件名 <br></p></blockquote><p><code>&lt;IfModule dir_module&gt;DirectoryIndex index.html index.php&lt;/IfModule&gt;</code></p></li></ul></li><li><p>重启 Apache</p><p>7.2. Apache 与 PHP</p></li></ul><p>对于很多初学者来说，很容易把 Apache 和 PHP 混在一起 混为一谈，其实他们两者各自有各自负责的领域，各自的职责，但是我们在使用 PHP 做动态网站开发时，两者就会产生联系，具体如下：<br><img src="'+v+'" alt="" loading="lazy"></p><blockquote><p>你可以理解为：Apache 是一家没有太多能力的公司，只能处理一些简单的业务（静态网站），但是心很大想做更多的事（动态网站），所以就想到了外包，所有额外的业务都需要外包给其他程序，而 PHP 就是理解为一个专门能够处理 php 业务的外包公司</p></blockquote><ol start="8"><li>作业</li></ol><ul><li>安装 Apache 并配置，确保本机可以访问。</li><li>同桌相互访问对方提供的 Web 服务。</li><li>让 Apache 支持 php 文件的运行。</li><li>可以配置网站的默认文档。</li></ul>',109)]))}const I=e(W,[["render",z],["__file","server_base.html.vue"]]),D=JSON.parse('{"path":"/plugins/server_base.html","title":"服务端开发基础","lang":"zh-CN","frontmatter":{"title":"服务端开发基础","date":"2025-02-26T00:00:00.000Z","article":false,"description":"服务端开发基础 建立你的第一个网站（目标） 前端开发 最终还是属于 Web 开发 中的一个分支，想要成为一名合格的前端开发人员，就必须要 充分理解 Web 的概念。 构建一个专业的网站是一项巨大的工作！对于新手我们应该从小事做起，也就是说咱们不可能立马就要求自己能够开发出跟淘宝一样的电商平台，但是对咱们来说建立一个属于自己的 Blog 网站并不难（其实...","head":[["meta",{"property":"og:url","content":"https://hr-koala.github.io/htblog/htblog/plugins/server_base.html"}],["meta",{"property":"og:site_name","content":"博客和随笔"}],["meta",{"property":"og:title","content":"服务端开发基础"}],["meta",{"property":"og:description","content":"服务端开发基础 建立你的第一个网站（目标） 前端开发 最终还是属于 Web 开发 中的一个分支，想要成为一名合格的前端开发人员，就必须要 充分理解 Web 的概念。 构建一个专业的网站是一项巨大的工作！对于新手我们应该从小事做起，也就是说咱们不可能立马就要求自己能够开发出跟淘宝一样的电商平台，但是对咱们来说建立一个属于自己的 Blog 网站并不难（其实..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://hr-koala.github.io/htblog/htblog/images/plugins/server1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-26T12:28:07.000Z"}],["meta",{"property":"article:published_time","content":"2025-02-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-26T12:28:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"服务端开发基础\\",\\"description\\":\\"服务端开发基础 建立你的第一个网站（目标） 前端开发 最终还是属于 Web 开发 中的一个分支，想要成为一名合格的前端开发人员，就必须要 充分理解 Web 的概念。 构建一个专业的网站是一项巨大的工作！对于新手我们应该从小事做起，也就是说咱们不可能立马就要求自己能够开发出跟淘宝一样的电商平台，但是对咱们来说建立一个属于自己的 Blog 网站并不难（其实...\\"}"]]},"headers":[],"git":{"createdTime":1740572364000,"updatedTime":1740572887000,"contributors":[{"name":"hr-koala","username":"hr-koala","email":"htong890@outlook.com","commits":2,"url":"https://github.com/hr-koala"}]},"readingTime":{"minutes":15.29,"words":4588},"filePathRelative":"plugins/server_base.md","localizedDate":"2025年2月26日","excerpt":"\\n<ol>\\n<li>建立你的第一个网站（目标）\\n<blockquote>\\n<p>前端开发 最终还是属于 <strong>Web 开发</strong> 中的一个分支，想要成为一名合格的前端开发人员，就必须要 <strong>充分理解 Web 的概念</strong>。</p>\\n</blockquote>\\n</li>\\n</ol>\\n<p>构建一个专业的网站是一项巨大的工作！对于新手我们应该从小事做起，也就是说咱们不可能立马就要求自己能够开发出跟淘宝一样的电商平台，但是对咱们来说建立一个属于自己的 Blog 网站并不难（其实再大的系统也是由一些基础功能叠加出来的），所以咱们就从这个话题开始聊。</p>","autoDesc":true}');export{I as comp,D as data};
